var _user$project$DoorLock$lockDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'webCamLink',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'name',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'userId',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'id',
					_elm_lang$core$Json_Decode$int,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$DoorLock))))));
var _user$project$DoorLock$webSocketUrl = 'ws://localhost:4000';
var _user$project$DoorLock$fetchLockUrl = function (id) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'http://localhost:4000/api/locks/',
		_elm_lang$core$Basics$toString(id));
};
var _user$project$DoorLock$viewNoUser = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$href('/'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('please login.'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$DoorLock$Model = F3(
	function (a, b, c) {
		return {user: a, lock: b, mdl: c};
	});
var _user$project$DoorLock$init = function (user) {
	return {
		ctor: '_Tuple2',
		_0: A3(_user$project$DoorLock$Model, user, _krisajenkins$remotedata$RemoteData$Loading, _debois$elm_mdl$Material$model),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$DoorLock$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$DoorLock$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'OnFetchLock':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{lock: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleLock':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return A3(_debois$elm_mdl$Material$update, _user$project$DoorLock$Mdl, _p0._0, model);
		}
	});
var _user$project$DoorLock$ToggleLock = function (a) {
	return {ctor: 'ToggleLock', _0: a};
};
var _user$project$DoorLock$viewDoorLock = F3(
	function (mdl, user, lock) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								user.username,
								A2(_elm_lang$core$Basics_ops['++'], '\'s DoorLock: ', lock.name))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$Basics_ops['++'], 'LOCK STATUS: ', lock.status)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Button$render,
							_user$project$DoorLock$Mdl,
							{
								ctor: '::',
								_0: 0,
								_1: {ctor: '[]'}
							},
							mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Button$raised,
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Button$colored,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(
											_user$project$DoorLock$ToggleLock(lock.id)),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Native_Utils.eq(lock.status, _user$project$Models$statusLocked) ? 'Unlock' : 'Lock'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$DoorLock$view = function (model) {
	var _p1 = model.user;
	if (_p1.ctor === 'Just') {
		var _p2 = model.lock;
		switch (_p2.ctor) {
			case 'NotAsked':
				return _elm_lang$html$Html$text('Please Wait');
			case 'Loading':
				return _elm_lang$html$Html$text('Loading DoorLock');
			case 'Success':
				return A3(_user$project$DoorLock$viewDoorLock, model.mdl, _p1._0, _p2._0);
			default:
				return _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Failed to Get Lock: ',
						_elm_lang$core$Basics$toString(_p2._0)));
		}
	} else {
		return _user$project$DoorLock$viewNoUser;
	}
};
var _user$project$DoorLock$OnFetchLock = function (a) {
	return {ctor: 'OnFetchLock', _0: a};
};
var _user$project$DoorLock$fetchLock = function (id) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		_user$project$DoorLock$OnFetchLock,
		_krisajenkins$remotedata$RemoteData$sendRequest(
			A2(
				_elm_lang$http$Http$get,
				_user$project$DoorLock$fetchLockUrl(id),
				_user$project$DoorLock$lockDecoder)));
};
